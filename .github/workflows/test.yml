name: Test

on: [push, pull_request]

jobs:
  build:

    name: Build and test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        otp: ['22.3']
        elixir: ['1.10.3']

    services:
      postgres:
        image: postgres:12
        ports: ['5410:5432']
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2

    - name: Set up Elixir
      uses: actions/setup-elixir@v1
      with:
        elixir-version: ${{matrix.elixir}}
        otp-version: ${{matrix.otp}}
      env:
        MIX_ENV: test

    - name: Restore dependencies cache
      uses: actions/cache@v2
      with:
        path: deps
        key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-

    - name: Install dependencies
      run: mix deps.get
      env:
        MIX_ENV: test

    - name: Check formatting
      run: mix format --check-formatted
      env:
        MIX_ENV: test

    - name: Setup test database
      run: MIX_ENV=test mix setup

    - name: Run tests
      run: mix test

    # - name: Retrieve Dialyzer PLT cache
    #   uses: actions/cache@v1
    #   id: plt-cache
    #   with:
    #     path: priv/plts
    #     key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-plts-${{ hashFiles('**/mix.lock') }}
    #   env:
    #     MIX_ENV: test
    #
    # - name: Create Dialyzer PLTs
    #   if: steps.plt-cache.outputs.cache-hit != 'true'
    #   run: |
    #     mkdir -p priv/plts
    #     mix dialyzer --plt
    #   env:
    #     MIX_ENV: test
    #
    # - name: Run Dialyzer
    #   run: mix dialyzer --no-check
    #   env:
    #     MIX_ENV: test
